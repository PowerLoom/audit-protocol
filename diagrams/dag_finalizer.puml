@startuml "DAG Finalizer Message Processing Flow"
autonumber

participant "transaction-manager" as txMgr
participant "dag-finalizer" as dagf
database redis
participant "IPFS-Node" as ipfs
participant "Consensus-Service" as consensus

group init
note over dagf #white : Spawn workers(along with configurable Pool Size) \nthat can process requests.
end

txMgr -> dagf : RecordAppended Request(requestID, sig,projID,tentativeBlockHeight)

note over dagf : Fetch JSON requestData.\nVerify Signature from header\n(X-Hook-Signature) by calculating the signature of event-data.

alt if signature not matched
dagf -> txMgr: 400 ()
end

alt if event_name != "RecordAppended"
dagf -> txMgr: 400 ()
end

dagf -[#lightgreen]> dagf : Distribute to specific worker-ID based on projectID. \n Note, we have to ensure requests for a project always lands on same worker.\n This would avoid redis-based locking.

dagf -> txMgr : 200
group Worker-Processing
    dagf -[#lightgreen]> dagf : Start processing request.\n No need to acquire any projectspecific lock

    dagf <-> redis:  MGET: Get finalized_block_height_project,tentativeBlockHeight from keys\n ["projectID:{}:blockHeight"],["projectID:{}:tentativeBlockHeight"]
    alt if couldn't get blockHeight (due to error other than key not found)
    note over dagf: Retry fetch and after max retries.\nStop processing.
    end

    dagf <-> redis: Get callback URL for the project.
    alt if couldn't get URL
    note over dagf: TBD
    end

    alt if tentative_block_height_event_data <= finalized_block_height_project
        note over dagf : Discard event as it is duplicate.
        dagf -> redis: Add to discarded events.
    end //if tentative_block_height_event_data <= finalized_block_height_project

    alt else if tentative_block_height_event_data > finalized_block_height_project + 1
        group Process out of order event
            note over dagf: Out of order event processing.
            group Process the out of order event
                note over dagf : Change state and add event_data in pendingTxns.
            end
            group save_event_data
                note over dagf : Optimization: can be stored it in pendingtxns Zset.\nThis is required when this entry is added to the DAG Chain.
            end
        end
         group check and resubmit any pending txns
            dagf <-> redis: Fetch pendingTxns from \n finalized_block_height_project + 1 to tentative_block_height_event_data
            note over dagf: Get PendingTxns_filtered for which callback is not received\n or lastTouchedBlock is older than 10 from currentEventBlock.\n Only single resubmission to be done.
            loop over PendingTxns_filtered
                 note over dagf: Fetch eventData. \n Build and submit request to commit_payload.\n update lastTouchedBlock.
            end
         end
         group check and fetch missing block from consensus (Similar to self-healing of chains)
            alt if tentative_block_height_event_data > finalized_block_height_project+5(no of epochs configurable)
                note over dagf: This takes care of self-healing of chains in case of processing error when out of order event occurs.\n As well as when a snapshot is missed.
                alt if first_pending_tx.event_data.tentativeBlockHeight >= finalized_block_height_project+1
                    note over dagf: arrive at epochToFetch(s) based on epochSize ,projectFirstEpochHeight and missingDAGHeight. \n epochToFetch = missingHeight*epochSize+firstEpochHeight
                    loop each epochHeight:
                        dagf <-> consensus: GET /epochStatus {instanceId,projectID,epochToFetch}
                        alt if 200 and finalized SnapshotCID received
                            group Simulate Process in order eventt. Make it a function
                            note over dagf: add snapshotCID to payloadCids Zset. Rest of in-order processing...\nCreate DAGBlock with empty txHash (Or fixed value such as NA???).
                            end
                        end
                        alt else //Consensus not achieved
                            note over dagf: Create an null payload at this height and insert a DAG block without a payload reference. \n This dag chain gap would be filled in by the network.
                            note over dagf: Notify as SKIP_EPOCH to dag_verifier.
                        else
                            note over dagf: Notify as MISSED_SNAPSHOT to dag_verifier.
                        end
                    end
                    note over dagf: Process pendingBlocks to be added to DAG Chain.\nFinalize pendingTxns from blockHeight+1 that have lastTouchedBlock==-1. Make it a function
                end
            end
         end
    end  // else if tentative_block_height_event_data > finalized_block_height_project + 1

    alt else if tentative_block_height_event_data == finalized_block_height_project + 1
        group Process in order event
            note over dagf: in order event has arrived.
            dagf <-> redis: Fetch all pendingTxns
            note over dagf: look for current txn by checking the hash.
            alt if not found
                note over dagf: It means duplicate received,\nadd to discarded events.\n Invoke group clear_payload_commit_data.
            end //not found

            group Create DAG Block
                dagf <-> redis: Fetch last DAG CID using tentativeBlockHeight-1 from "project:{}:Cids". (TBD - Optimize)
                dagf <-> ipfs : Create DAG Chain entry(DAG PUT)
                dagf <-> redis: Add DAG CID in "project:{}:Cids" ZSet at tentativeBlockHeight
                dagf <-> redis : Update finalized_block_height at "projectID:{}:blockHeight"
            end
            group clear_payload_commit_data
                dagf <-> redis: Delete "eventData:{}"".
                dagf <-> redis: Remove from pending transactions.
                dagf <-> redis: Delete "payloadCommit:{}"."
                dagf <-> redis: Delete "txHash:{tx_hash}:inputData"
            end
            dagf <-> redis: Delete "ProcessingLogs"
            note over dagf: Create diffMap and update in redis -\n Refer calculate_diff function (TBD)
            alt if calculate_diff_fails
            note over dagf: Catch exception/error..log it and continue.
            end
            note over dagf: send confirmation callback.
        end
        group Process pendingBlocks to be added to DAG Chain
            loop over pendingBlocks from tentative_block_height_event_data+1 till you find gap (confirmed_max_blockHeight)
                alt if pendingBlock[i].height == cur_max_height_project + 1
                    dagf <-> redis: get event Data
                    note over dagf : Invoke Group Create DAG Block. \nCalculate Diff. \nGroup clear_payload_commit_data.\n Clear ProcessingLogs.
                    alt if calculate_diff_fails
                        note over dagf: Catch exception/error..log it and continue.
                    end
                    note over dagf: Invoke Commit confirmation callback.
                end
            end //loop
            dagf <-> redis: Remove blockHeight from pendingBlocks. \n(ZRemRangeByScore,tentative_block_height_event_data,confirmed_max_blockHeight)
        end
    end //else if tentative_block_height_event_data == finalized_block_height_project + 1
    note over dagf: Release project specific lock from redis.
end