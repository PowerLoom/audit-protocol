@startuml "Payload commit service"
autonumber

participant "payload_commit_service" as pcs
participant relayer
participant smart_contract
queue rabbitmq
database redis
database local_disk as disk
database ipfs
database web3_storage

group snapshot payload message
    rabbitmq -> pcs: received snapshot payload CID from snapshotter

    note over pcs: create EIP-712 signature for smart contract transaction
    alt relayer is enabled in config
        pcs -> relayer: send EIP-712 signature
    else relayer is disabled in config
        pcs -> smart_contract: send EIP-712 signature directly to contract
    end
end

group snapshot finalized message
    rabbitmq -> pcs: received snapshot finalized message for a project at an `epochId` 
    pcs -> redis: store finalized snapshot CID at `epochId` for project
    redis -> pcs: get unfinalized snapshot CID against `epochId` for the project

    alt unfinalized snapshot CID not found at `epochId`
        pcs -> redis: mark in snapshotter status report against project and epoch ID as `OnlyFinalizedSnapshotSubmission`
    else unfinalized snapshot CID found at `epochId` for project
            alt stored snapshot CID == finalized snapshot CID
                pcs -> redis: clean up finalized snapshot CID zset
                pcs -> redis: mark in snapshotter status report against project and epoch ID as `SuccessfulSnapshotSubmission`
            else stored snapshotCid != finalized snapshotCid (for previous epochId)
                 pcs -> ipfs: unpin unfinalized snapshot CID
                 pcs -> redis: mark in snapshotter status report against project and epoch ID as `IncorrectSnapshotSubmission`
    end
    pcs -> ipfs: get snapshot for finalized cid
    pcs -> local_disk: store fetched snapshot data

    pcs -> redis: generate and store snapshotter report
    note left: [project wise]\ntotal missed snapshots count\ntotal incorrect snapshots count\ntotal successful snapshots count\nstatus report
end

@enduml
