@startuml "Data preparation service and aggregated snapshots list flow"
autonumber

participant "Consumer(UI/3rd Party)" as client
participant "core-api" as api
participant "pairs-data-aggregation" as pairAgg
database redis 
participant "audit-protocol" as ap

group pairs-data-aggregation-cycle for periodically(120 secs)
pairAgg -> pairAgg : generate aggregated data for all pairs and create a snapshot of it

note over pairAgg: This will give us a payloadCID and timestamp of the aggregated data
note over pairAgg
    timestamp can be taken from rpc using block height, 
    but we are already storing timestamp in dag block so we can update snapshot data model to include timestamp 
end note  

pairAgg -> redis : create a zset and store snapshot timpestamp -> payloadCID 

end

group periodically(120 secs) run and do the following

    pairAgg <- ap : get latest dag block of daily_stats and v2-pairs snapshot from audit-protocol
    
    alt if v2-pairs snapshot block-height is NOT greator than daily stats block-height 
        pairAgg <- pairAgg : exit daily stats cycle
    else
        pairAgg <- redis : Fetch latest and (latest - 24h) timestamp entry from redis zset
        note over pairAgg: if exact 24h hour old entry is not found then choose nearest

        pairAgg <- ap : Fetch ipfs payload using payloadCID from above zset entries

        note over pairAgg : Process and generate Aggregated daily stats snapshot to be committed to Audit-protocol.
        pairAgg -> ap : commit-payload { dailyStats:{}, projectId: \n"uniswap_V2DailyStatsSnapshot_<Namespace>" } to audit-protocol 
        ap -> pairAgg : wait and get IPFS payload CID for commited snapshot
        pairAgg <-> redis : Store PayloadCID under key \n  (uniswap::<namespace>::v2_pairs::daily_stats::snapshots Zset against BlockHeight as score)
        pairAgg <-> redis: Store payload against key \n uniswap::<namespace>::v2_pairs::daily_stats::snapshot::<BlockHeight> with a TTL value \n https://redis.io/commands/expire/)
        note over pairAgg: Prune the Zset if more than n snapshots are crossed (n is configurable).
        note over pairAgg: sleep for 60 secs
    end 
end


group API(v2_daily_stats/snapshots)
    client -> api : Request /v2_daily_stats/snapshots
    api <-> redis : Fetch snapshots Zset for project (last n snapshots)
    api -> client : List of blockHeights at which snapshots are available.\n  {"snapshots":[145567, 145577,..]}
end

group API(/v2_daily_stats/<blockheight>) with projectId as optional argument
    client -> api : Request /v2_daily_stats/<blockHeight>
    api <-> redis: Check reqBlockHeight is present in redis Zset (uniswap::<namespace>::v2_pairs::snapshots)
    api <-> redis : Check if reqBlockHeight payload is present.
    alt  #orange if reqBlockHeight is not present in cache
        note over api: Calculate diff between currentBlockHeight and reqBlockHeight from zSet.
        api -> ap: Get latestDAGHeight of uniswap_V2DailyStatsSnapshot_<Namespace> 
        note over api: Roughly estimate where the blockHeight is going to be based on epochsize, blockHeightDiff and DAGHeight.
        api -> ap: Get Payloads between fromBlock and toBlock for uniswap_V2DailyStatsSnapshot_<Namespace> project.
        api <-> redis: Create payload Key in redis at blockHeight with expiry.
    else 
        api <-> redis : Fetch payload at uniswap::v2_pairs::<namespace>::daily_stats::snapshot::<blockHeight>
        api <-> redis: Update expiry for payload Key.
    end 

    alt if no snapshot found at reqBlockHeight
        api -> Client : 404. 
    end 

    alt if projectId
         note over api: Filter snapshot for specific projectId and return only that part.
         api -> client : Project specific List of blockHeights at which snapshots are available.\n  {projectID1:{"payload":{}}}
    else 
        api -> client : Project specific List of blockHeights at which snapshots are available.\n  {projectID1:{"payload":{}},projectID2:...}
    end 
end