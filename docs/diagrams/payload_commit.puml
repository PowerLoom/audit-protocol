@startuml "Snapshot-Storage-Message-Processing"
autonumber

participant "rabbitmq" as rmq
participant "Payload-Commit" as pc
database redis
participant "transaction-manager" as txMgr
participant "dag-finalizer" as dagf
participant "IPFS-Node" as ipfs
participant "Consensus-Service" as consensus
participant "web3.storage" as w3s

group payload processing
    note over pc: At any point during processing of the message,\n if a network call results in failure even after max-retries,\n payload is ignored as it is expected to be addressed via self-healing feature.

    rmq  -> pc : Payload-Commit message

    alt if not resubmitted
        alt if message has epochDetails
            pc <-> redis: Fetch project state (firstEpochEndHeight and EpochSize)
            alt if projectState is not present
                pc <-> redis: Set projectState to curEpochEndHeight and EpochSize(endHeight - startHeight)
                note over pc: set tentativeHeight as 1
            else
                note over pc: Calculate and set tentativeHeight as (curEpochEndHeight-firstEpochEndHeight)/epochSize + 1
            end
        else (Summary Project)
            pc <-> redis: Fetch tentativeBlockHeight (tt)
            note over pc: assign tentativeBlockHeight as  tt+1
        end

        alt if web3.storage flag is set and is enabled
            pc <-> w3s: Upload snapshot to web3.storage
        end
        pc <-> ipfs: Add snapshot to IPFS and get CID
        note over pc: Store payload in local cache
        pc <-> redis: Add payloadCid to tt mapping in payloadCids Zset
        alt if SummaryProject
            pc <-> redis: Update project's tentativeBlockHeights
        end

    else if resubmitted
        alt if snapshotCID is null and payload is null
            note over pc: Ignore the payload
        end

    end

    alt if skipAnchorProof
        alt if not SummaryProject or consensus is enabled
            pc <-> consensus: Submit snapshot for consensus /submitSnapshot
            note over pc: Add epoch along with project in an in-memory pendingQueue.
            note over pc: Consensus Polling logic shall take care of further processing.
        else
            pc <-> redis: Add txn to pendingTxns.
        end
    else
        pc <-> txMgr : Submit proof of snapshot and get requestID
        pc <-> redis: Add txn to pendingTxns.
    end
end


group Polling for Snapshot Consensus Status

    loop over entries in pendingQueue
        pc <-> consensus: Invoke /checkForSnapshotConfirmation for project and epoch
        alt if snapshot is finalized
            note over pc: Delete entry fron pendingQueue
            pc <-> redis: Add snapshot to pendingTxns for project.
            pc <-> dagf: Invoke Dag finalization callback
        else
            alt if curTime - snapshotSubmissionTime > finalizationWaitTime
                note over pc: Remove snapshot from pendingQueue as this will further be handled via self-healing.
            end
        end
    end

@enduml